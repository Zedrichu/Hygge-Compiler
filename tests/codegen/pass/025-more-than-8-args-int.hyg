// Add x1 + x10 function
fun addFirstAndLast(x1: int, x2: int, x3: int, x4: int, x5: int, x6: int, x7: int, x8: int, x9: int, x10: int): int = x1 + x10;

let result_add = addFirstAndLast(1,2,3,4,5,6,7,8,9,10);
assert(result_add = 11);

// Multiply all int args (1 to 10)
fun multiplyall(x1: int, x2: int, x3: int, x4: int, x5: int, x6: int, x7: int, x8: int, x9: int, x10: int): int = {
    x1 * x2 * x3 * x4 * x5 * x6 * x7 * x8 * x9 * x10
};

let result_multall = multiplyall(1,2,3,4,5,6,7,8,9,10);
assert(result_multall = 3628800);

// Function with 12 arguments
fun sumTwelve(a1: int, a2: int, a3: int, a4: int, a5: int, a6: int, a7: int, a8: int, a9: int, a10: int, a11: int): int = {
    a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11
};

let twelve_sum = sumTwelve(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
assert(twelve_sum = 66);

// Nested function calls with many arguments
fun addLastTwo(a1: int, a2: int, a3: int, a4: int, a5: int, a6: int, a7: int, a8: int, a9: int, a10: int): int = {
    a9 + a10
};

fun nestedCall(b1: int, b2: int, b3: int, b4: int, b5: int, b6: int, b7: int, b8: int): int = {
    addLastTwo(b8, b8, b8, b7, b6, b5, b4, b3, b2, b1)
};

let nested_result = nestedCall(100, 200, 300, 400, 500, 600, 700, 800);
assert(nested_result = 300) // 200 + 100
